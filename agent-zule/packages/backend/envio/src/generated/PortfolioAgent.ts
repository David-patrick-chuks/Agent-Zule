// Generated types for PortfolioAgent contract events
// This file would typically be generated by Envio based on the contract ABI

export interface PortfolioRebalanced {
  userId: string;
  totalValue: string;
  positions: Array<{
    token: string;
    amount: string;
    value: string;
    allocation: number;
  }>;
  riskScore: number;
  lastRebalanced: string;
  changes: Array<{
    token: string;
    oldAmount: string;
    newAmount: string;
    change: string;
    changePercentage: number;
  }>;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}

export interface PortfolioCreated {
  userId: string;
  totalValue: string;
  positions: Array<{
    token: string;
    amount: string;
    value: string;
    allocation: number;
  }>;
  riskScore: number;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}

export interface PortfolioUpdated {
  userId: string;
  totalValue: string;
  positions: Array<{
    token: string;
    amount: string;
    value: string;
    allocation: number;
  }>;
  riskScore: number;
  lastRebalanced: string;
  changes: Array<{
    token: string;
    oldAmount: string;
    newAmount: string;
    change: string;
    changePercentage: number;
  }>;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}

export interface PortfolioDeleted {
  userId: string;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}

export interface PermissionChanged {
  userId: string;
  agentId: string;
  permissionType: string;
  status: string;
  conditions: Array<{
    type: string;
    value: string;
    operator: string;
  }>;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}

export interface PermissionGranted {
  userId: string;
  agentId: string;
  permissionType: string;
  conditions: Array<{
    type: string;
    value: string;
    operator: string;
  }>;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}

export interface PermissionRevoked {
  userId: string;
  agentId: string;
  permissionType: string;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}

export interface PermissionUpdated {
  userId: string;
  agentId: string;
  permissionType: string;
  status: string;
  conditions: Array<{
    type: string;
    value: string;
    operator: string;
  }>;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}

export interface TradeExecuted {
  userId: string;
  tokenIn: string;
  tokenOut: string;
  amountIn: string;
  amountOut: string;
  price: string;
  slippage: number;
  gasUsed: string;
  gasPrice: string;
  fee: string;
  route: string[];
  dex: string;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}

export interface TradeFailed {
  userId: string;
  tokenIn: string;
  tokenOut: string;
  amountIn: string;
  amountOut: string;
  price: string;
  slippage: number;
  gasUsed: string;
  gasPrice: string;
  fee: string;
  route: string[];
  dex: string;
  reason: string;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}

export interface TradePending {
  userId: string;
  tokenIn: string;
  tokenOut: string;
  amountIn: string;
  amountOut: string;
  price: string;
  slippage: number;
  gasUsed: string;
  gasPrice: string;
  fee: string;
  route: string[];
  dex: string;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}

export interface TradeCompleted {
  userId: string;
  tokenIn: string;
  tokenOut: string;
  amountIn: string;
  amountOut: string;
  price: string;
  slippage: number;
  gasUsed: string;
  gasPrice: string;
  fee: string;
  route: string[];
  dex: string;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}

export interface CrossChainInitiated {
  userId: string;
  sourceChain: string;
  targetChain: string;
  token: string;
  amount: string;
  bridge: string;
  fees: string;
  estimatedTime: number;
  sourceTxHash: string;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}

export interface CrossChainCompleted {
  userId: string;
  sourceChain: string;
  targetChain: string;
  token: string;
  amount: string;
  bridge: string;
  fees: string;
  sourceTxHash: string;
  targetTxHash: string;
  completedAt: string;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}

export interface CrossChainFailed {
  userId: string;
  sourceChain: string;
  targetChain: string;
  token: string;
  amount: string;
  bridge: string;
  fees: string;
  sourceTxHash: string;
  reason: string;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}

export interface CrossChainPending {
  userId: string;
  sourceChain: string;
  targetChain: string;
  token: string;
  amount: string;
  bridge: string;
  fees: string;
  estimatedTime: number;
  sourceTxHash: string;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}

export interface LiquidityAdded {
  poolAddress: string;
  token0: string;
  token1: string;
  reserve0: string;
  reserve1: string;
  liquidity: string;
  fee: number;
  tick: number;
  sqrtPriceX96: string;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}

export interface LiquidityRemoved {
  poolAddress: string;
  token0: string;
  token1: string;
  reserve0: string;
  reserve1: string;
  liquidity: string;
  fee: number;
  tick: number;
  sqrtPriceX96: string;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}

export interface SwapExecuted {
  poolAddress: string;
  token0: string;
  token1: string;
  reserve0: string;
  reserve1: string;
  liquidity: string;
  fee: number;
  tick: number;
  sqrtPriceX96: string;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}

export interface PoolCreated {
  poolAddress: string;
  token0: string;
  token1: string;
  reserve0: string;
  reserve1: string;
  liquidity: string;
  fee: number;
  tick: number;
  sqrtPriceX96: string;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}

export interface PoolUpdated {
  poolAddress: string;
  token0: string;
  token1: string;
  reserve0: string;
  reserve1: string;
  liquidity: string;
  fee: number;
  tick: number;
  sqrtPriceX96: string;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}

export interface MarketDataUpdated {
  timestamp: string;
  totalMarketCap: string;
  totalVolume24h: string;
  marketTrend: string;
  volatility: number;
  fearGreedIndex: number;
  topGainers: Array<{
    token: string;
    symbol: string;
    priceChange: string;
    priceChangePercent: number;
  }>;
  topLosers: Array<{
    token: string;
    symbol: string;
    priceChange: string;
    priceChangePercent: number;
  }>;
  blockNumber: number;
  transactionHash: string;
}

export interface PriceUpdated {
  token: string;
  price: string;
  volume: string;
  marketCap: string;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}

export interface VolumeUpdated {
  token: string;
  volume: string;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}

export interface VolatilityUpdated {
  token: string;
  volatility: number;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}

export interface HealthCheck {
  status: string;
  uptime: string;
  lastBlock: number;
  processedEvents: number;
  errors: number;
  version: string;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}

export interface StatusUpdate {
  status: string;
  uptime: string;
  lastBlock: number;
  processedEvents: number;
  errors: number;
  version: string;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}

export interface ErrorReport {
  error: string;
  message: string;
  stack: string;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}

export interface PerformanceUpdate {
  totalEvents: number;
  eventsPerSecond: number;
  averageProcessingTime: number;
  errorRate: number;
  uptime: string;
  memoryUsage: string;
  cpuUsage: number;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}

export interface StatsUpdated {
  totalEvents: number;
  eventsPerSecond: number;
  averageProcessingTime: number;
  errorRate: number;
  uptime: string;
  memoryUsage: string;
  cpuUsage: number;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}

export interface MetricsUpdated {
  totalEvents: number;
  eventsPerSecond: number;
  averageProcessingTime: number;
  errorRate: number;
  uptime: string;
  memoryUsage: string;
  cpuUsage: number;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}

export interface PerformanceUpdated {
  totalEvents: number;
  eventsPerSecond: number;
  averageProcessingTime: number;
  errorRate: number;
  uptime: string;
  memoryUsage: string;
  cpuUsage: number;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}

export interface HealthUpdated {
  status: string;
  uptime: string;
  lastBlock: number;
  processedEvents: number;
  errors: number;
  version: string;
  blockNumber: number;
  transactionHash: string;
  timestamp: number;
}
